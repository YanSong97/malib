import logging
import pytest

from malib.gt.exploitability import nash_conv_v2
from malib.envs.classic import ClassicEnv
from malib.envs.tabular.game import Game as TabularGame
from malib.algorithm.random import RandomPolicy
from malib.algorithm.greedy import GreedyPolicy


@pytest.fixture(scope="session")
def env_description():
    desc = {
        "creator": ClassicEnv,
        "config": {
            "scenario_configs": {},
            "env_id": "leduc_holdem_v3",
        },
        "possible_agents": None,
    }
    env = desc["creator"](**desc["config"])
    desc["possible_agents"] = env.possible_agents
    return desc


@pytest.mark.parametrize(
    "br_func,policy_func",
    [[RandomPolicy, GreedyPolicy], [GreedyPolicy, RandomPolicy]],
)
def test_leduc_poker_nash_conv(env_description, br_func, policy_func):
    game = TabularGame(env_description)
    policies = {
        player: policy_func(
            "test",
            game.game_spec.observation_spaces[player],
            game.game_spec.action_spaces[player],
            {},
            {},
        ).to_tabular()
        for player in env_description["possible_agents"]
    }
    brs = {
        player: br_func(
            "br",
            game.game_spec.observation_spaces[player],
            game.game_spec.action_spaces[player],
            {},
            {},
        ).to_tabular()
        for player in env_description["possible_agents"]
    }
    nash_conv = nash_conv_v2(env_description, brs, policies)
    logging.debug(f"Nash_conv: {nash_conv}")
